/*
 * sdcard.c
 *
 *  Created on: May 22, 2015
 *      Author: Austin.Hansen
 */


//#include "diskio.h"
#include <stdint.h>
#include <stdbool.h>
#include <machine.h>
#include "sdcard.h"
#include "r_rspi_rx600.h"
#include "platform.h"

// Pack 'em tight!
#pragma pack

// COMMAND struct (holds a standard 6-byte SD SPI command)
typedef struct COMMAND {
	uint8_t command;
	uint32_t argument;
	uint8_t crc;
} COMMAND;

// Macro for initializing a COMMAND struct (argument must be reversed to big-endian)
#define CMD(X,Y,Z) (COMMAND) { 0x40|X, ((Y&0xFF000000)>>24) | \
									   ((Y&0x00FF0000)>>8)  | \
									   ((Y&0x0000FF00)<<8)  | \
									   ((Y&0x000000FF)<<24) , Z }
#define ACMD(X,Y,Z) (COMMAND) { 0x40|X, ((Y&0xFF000000)>>24) | \
									    ((Y&0x00FF0000)>>8)  | \
									    ((Y&0x0000FF00)<<8)  | \
									    ((Y&0x000000FF)<<24) , Z }

void sendCmd(uint8_t channel, uint8_t command, uint32_t argument, uint8_t crc, uint8_t *response, uint32_t timeout);
void waitForR1(uint8_t channel, uint8_t *response, uint32_t timeout);

static uint8_t response;
static uint32_t timeout;
static uint16_t crc;

uint8_t sd_initialize() {

	// COMMAND struct will be used for sending commands
	COMMAND cmd;

	// To be used for receiving R7 response from CMD8
	uint8_t r7[4];

	// Initialize RSPI channel 1 (if not already initialized)
	R_RSPI_Init(RSPI_CHANNEL_0);

	// Select SD card (pid ignored due to no locking)
	R_RSPI_Select(RSPI_CHANNEL_0, SDMICRO_SELECTED, 0);

	// Give the SDC some clocks to figure itself out
	for(timeout=0; timeout<0xFF; timeout++) R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);

	// Send CMD0 (CRC required)
	cmd = CMD(0, 0x00000000, 0x95);
	R_RSPI_Write(RSPI_CHANNEL_0, &cmd, 6, 0);

	// Keep reading response until response received or timeout
	for(timeout=0; (timeout<0xFFFF) && (response == 0xFF); timeout++) R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
	if(response != 0x01) {
		R_RSPI_Deselect(RSPI_CHANNEL_0, SDMICRO_SELECTED, 0);
		return response;
	}

	// Send CMD8 (CRC required)
	cmd = CMD(8, 0x000001AA, 0x87);
	R_RSPI_Write(RSPI_CHANNEL_0, &cmd, 6, 0);
	for(timeout=0; (timeout<0xFFFF) && (response&0xBE != 0); timeout++) R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
	if(response != 0x01) {
		cmd = CMD(55, 0x40000000, 0);
		R_RSPI_Write(RSPI_CHANNEL_0, &response, 1, 0);
	}	
	R_RSPI_Read(RSPI_CHANNEL_0, r7, 4, 0);
	if((r7[2]==0x01) && (r7[3]==0xAA)) {
		cmd = CMD()
	}

	// Send CMD1 until 0x00 received or timeout (CRC no longer required)
	/*cmd = CMD(1, 0x00000000, 0x00);
	for(timeout=0; (timeout<0xFFFF) && (response != 0x00); timeout++) R_RSPI_SendReceive(RSPI_CHANNEL_0, &cmd, &response, 1, 0);
	if(response != 0x00) {
		R_RSPI_Deselect(RSPI_CHANNEL_0, SDMICRO_SELECTED, 0);
		return response;
	}*/

	// Deselect the SD CS line and return the response, whatever it may be (hopefully 0x00)
	R_RSPI_Deselect(RSPI_CHANNEL_0, SDMICRO_SELECTED, 0);
	return response;

}

uint8_t sd_read(uint8_t *buffer, uint32_t address, uint16_t length) {

	COMMAND cmd;

	// Select SD CS
	R_RSPI_Select(RSPI_CHANNEL_0, SDMICRO_SELECTED, 0);

	switch(length) {
		case 0:
			response = 0;
			break;

		case 1:
			// Write CMD17 (single block read)
			cmd = CMD(17, address+0x10E00, 0);
			R_RSPI_Write(RSPI_CHANNEL_0, &cmd, 6, 0);

			// Read until timeout or R1 response
			response = 0xFF;
			for(timeout=0; (timeout<0xFFFFF) && (response == 0xFF); timeout++) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}
			if(response != 0x00) break;

			// Read until timeout or data token received
			response = 0xFF;
			for(timeout=0; (timeout<0xFFFF) && (response == 0xFF); timeout++) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}
			if(response != 0xFE) break;

			// Read block and CRC, return success
			R_RSPI_Read(RSPI_CHANNEL_0, buffer, 512, 0);
			R_RSPI_Read(RSPI_CHANNEL_0, &crc, 2, 0);
			
			break;

		// Since length is unsigned, default handles cases >1
		default:
			// Write CMD18
			cmd = CMD(18, address+0x10E00, 0);
			R_RSPI_Write(RSPI_CHANNEL_0, &cmd, 6, 0);

			// Read until timeout or R1 response
			response = 0xFF;
			for(timeout=0; (timeout<0xFFFFF) && (response == 0xFF); timeout++) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}
			if(response != 0x00) break;

			do {

				// Read until timeout or data token received
				response = 0xFF;
				for(timeout=0; (timeout<0xFFFF) && (response == 0xFF); timeout++) {
					R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
				}
				if(response != 0xFE) break;

				// Read block and CRC, return success
				R_RSPI_Read(RSPI_CHANNEL_0, buffer, 512, 0);
				R_RSPI_Read(RSPI_CHANNEL_0, &crc, 2, 0);

				buffer += 512;
				length--;

			} while(length > 0);

			// Send STOP_TRAN command (CMD12)
			cmd = CMD(12, 0x00000000, 0);
			R_RSPI_Write(RSPI_CHANNEL_0, &cmd, 6, 0);

			// Receive stuff byte, then wait for R1
			R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			response = 0xFF;
			for(timeout=0; (timeout<0xFFFF) && (response == 0xFF); timeout++) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}
			if(response != 0x00) break;

			// Wait until no longer busy
			while(response != 0xFF) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}

	}

	// Deselect SD CS
	R_RSPI_Deselect(RSPI_CHANNEL_0, SDMICRO_SELECTED, 0);

	return response;
}

uint8_t sd_write(uint8_t *buffer, uint32_t address, uint16_t length) {

	COMMAND cmd;
	uint16_t smallcmd;

	// Select SD CS
	R_RSPI_Select(RSPI_CHANNEL_0, SDMICRO_SELECTED, 0);

	switch(length) {
		case 0:
			response = 0;
			break;

		case 1:
			// Write CMD17 (single block read)
			cmd = CMD(24, address+0x10E00, 0);
			R_RSPI_Write(RSPI_CHANNEL_0, &cmd, 6, 0);

			// Read until timeout or R1 response
			response = 0xFF;
			for(timeout=0; (timeout<0xFFFFF) && (response == 0xFF); timeout++) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}
			if(response != 0x00) break;

			// Send 8 clocks
			R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);

			// Send data token
			smallcmd = 0xFEFE;
			R_RSPI_Write(RSPI_CHANNEL_0, &smallcmd, 1, 0);

			// Send data packet
			R_RSPI_Write(RSPI_CHANNEL_0, buffer, 512, 0);

			// Send CRC
			smallcmd = 0;
			R_RSPI_Write(RSPI_CHANNEL_0, &smallcmd, 2, 0);

			// Receive data response
			R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			if((response&0x0F) != 0x05) break;

			// Wait until no longer busy
			while(response != 0xFF) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}
			
			break;

		// (case length > 1)
		default:
			// CMD55 specifies the next command as an ACMD
			cmd = CMD(55, 0x00000000, 0);
			R_RSPI_Write(RSPI_CHANNEL_0, &cmd, 6, 0);

			// Wait for R1
			response = 0xFF;
			for(timeout=0; (timeout<0xFFFFF) && (response == 0xFF); timeout++) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}
			if(response != 0x00) break;

			// Write ACMD23 to set pre-erase blocks
			cmd = ACMD(23, length, 0);
			R_RSPI_Write(RSPI_CHANNEL_0, &cmd, 6, 0);

			// Wait for R1
			response = 0xFF;
			for(timeout=0; (timeout<0xFFFFF) && (response == 0xFF); timeout++) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}
			if(response != 0x00) break;

			// Send CMD25 (WRITE_MULTIPLE_BLOCK)
			cmd = CMD(25, address+0x11200, 0);
			R_RSPI_Write(RSPI_CHANNEL_0, &cmd, 6, 0);

			// Read until timeout or R1 response
			response = 0xFF;
			for(timeout=0; (timeout<0xFFFFF) && (response == 0xFF); timeout++) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}
			if(response != 0x00) break;

			do {

				// Send 8 clocks
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);

				// Send data token
				smallcmd = 0xFEFE;
				R_RSPI_Write(RSPI_CHANNEL_0, &smallcmd, 1, 0);

				// Send data packet
				R_RSPI_Write(RSPI_CHANNEL_0, buffer, 512, 0);

				// Send CRC
				smallcmd = 0;
				R_RSPI_Write(RSPI_CHANNEL_0, &smallcmd, 2, 0);

				// Receive data response
				response = 0;
				for(timeout=0; (timeout<0xFFFFF) && (response != 0xFF); timeout++)
					R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
				//R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
				//R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
				//R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
				//if((response&0x0F) != 0x05) break;

				buffer = (uint32_t)buffer + 512;
				length--;

			} while(length > 0);

			// Send STOP_TRAN command (CMD12)
			cmd = CMD(12, 0x00000000, 0);
			R_RSPI_Write(RSPI_CHANNEL_0, &cmd, 6, 0);

			// Receive stuff byte, then wait until no longer busy
			R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			response = 0;
			while(response != 0xFF) {
				R_RSPI_Read(RSPI_CHANNEL_0, &response, 1, 0);
			}

	}

	// Deselect SD CS
	R_RSPI_Deselect(RSPI_CHANNEL_0, SDMICRO_SELECTED, 0);

	return response;
}

void sendCmd(uint8_t channel, uint8_t command, uint32_t argument, uint8_t crc, uint8_t *response, uint32_t timeout) {
	COMMAND cmd = CMD(command, argument, crc);
	R_RSPI_Write(channel, &cmd, 6, 0);
	waitForR1(channel, response, timeout);
}

void waitForR1(uint8_t channel, uint8_t *response, uint32_t timeout) {
	for(timeout; timeout && (*response == 0xFF); timeout--) R_RSPI_Read(channel, response, 1, 0);
}
